include: "../config.py"


ext=".preprocessed_qf%d.ec%d.filter.pass" % (QUALFILTER, CORRECTK)

rule all:
    input:
        graph=OUTDIR+"/sga/merged.rmdup_%d.asqg" % (OVERLAP),
        counts=OUTDIR+"/sga/merged.rmdup_%d_counts.tsv" % (OVERLAP)

rule reverse_r2:
    input:
        INDIR+"/{sample}"+SUFFIX2
    output:
        temp(INDIR+"/{sample}_reversed"+SUFFIX2)
    shell:
        "seqkit seq -r -t DNA -v -p {input} -o {output}"


rule sga_preprocess:
    input:
        f1=INDIR+"/{sample}"+SUFFIX1,
        f2=INDIR+"/{sample}_reversed"+SUFFIX2
    output:
        fa="{OUTDIR}/sga/{sample}.preprocessed_qf{QUALFILTER, [0-9]+}.fa",
        idx=temp("{OUTDIR}/sga/{sample}.preprocessed_qf{QUALFILTER, [0-9]+}.bwt"),
        sai=temp("{OUTDIR}/sga/{sample}.preprocessed_qf{QUALFILTER, [0-9]+}.sai")
    params:
        pref="{OUTDIR}/sga/{sample}.preprocessed_qf{QUALFILTER, [0-9]+}"
    log:
        "{OUTDIR}/sga/{sample}.preprocessed_qf{QUALFILTER, [0-9]+}_logging.txt"
    threads:
        4
    shell:
        SGADIR+"sga preprocess --pe-mode=1  -o {output.fa} -m 50 --suffix=:{wildcards.sample} " +
        "--pe-mode=1 --quality-filter={wildcards.QUALFILTER} --discard-quality {input.f1} {input.f2} >> {log} 2>> {log} && " +
        SGADIR+"sga index -a ropebwt -t {threads} --prefix={params.pref} --no-reverse {output.fa} >> {log} 2>> {log}"

ruleorder: sga_preprocess > sga_index


rule sga_correct:
    input:
        fa="{OUTDIR}/sga/{name}.preprocessed_qf{QUALFILTER}.fa",
        idx="{OUTDIR}/sga/{name}.preprocessed_qf{QUALFILTER}.bwt",
        sai="{OUTDIR}/sga/{name}.preprocessed_qf{QUALFILTER}.sai",
    output:
        fa="{OUTDIR}/sga/{name}.preprocessed_qf{QUALFILTER, [0-9]+}.ec{CORRECTK, [0-9]+}.fa",
    log:
        "{OUTDIR}/sga/{name}.preprocessed_qf{QUALFILTER, [0-9]+}.ec{CORRECTK, [0-9]+}_logging.txt"
    params:
        pref="{OUTDIR}/sga/{name}.preprocessed_qf{QUALFILTER, [0-9]+}",
        prefo="{OUTDIR}/sga/{name}.preprocessed_qf{QUALFILTER, [0-9]+}.ec{CORRECTK, [0-9]+}.fa"
    threads:
        4
    shell:
        SGADIR+"sga correct -t {threads} -k {CORRECTK} --prefix={params.pref} -o {output.fa} {input.fa} " +
        " >> {log} 2>> {log} "

rule sga_index:
    input:
        "{OUTDIR}/sga/{file}.fa"
    output:
        temp("{OUTDIR}/sga/{file}.bwt"),
        temp("{OUTDIR}/sga/{file}.rbwt"),
        temp("{OUTDIR}/sga/{file}.sai"),
        temp("{OUTDIR}/sga/{file}.rsai")
    log:
        "{OUTDIR}/sga/{file}_logging.txt"
    threads:
        4
    shell:
        SGADIR+"sga index -a ropebwt -t {threads} --prefix={OUTDIR}/sga/{wildcards.file} {input} >> {log} 2>> {log}"

rule sga_filter:
    input:
        f="{OUTDIR}/sga/{name}.fa",
        bwt="{OUTDIR}/sga/{name}.bwt",
        rbwt="{OUTDIR}/sga/{name}.rbwt",
        sai="{OUTDIR}/sga/{name}.sai",
        rsai="{OUTDIR}/sga/{name}.rsai"
    output:
        "{OUTDIR}/sga/{name}.filter.pass.fa",
        "{OUTDIR}/sga/{name}.discard.fa",
        bwt=temp("{OUTDIR}/sga/{name}.filter.pass.bwt"),
        rbwt=temp("{OUTDIR}/sga/{name}.filter.pass.rbwt"),
        sai=temp("{OUTDIR}/sga/{name}.filter.pass.sai"),
        rsai=temp("{OUTDIR}/sga/{name}.filter.pass.rsai")
    log:
        "{OUTDIR}/sga/{name}_logging.txt"
    threads:
        4
    shell:
        SGADIR+"sga filter --substring-only --kmer-size={CORRECTK} " +
            "--kmer-threshold=3  -t {threads} {input.f} >> {log} 2>> {log}"


########### Merging control and treated, rmdup... ##########
rule merge_conditions:
    input:
        sc=expand("{OUTDIR}/sga/{sample}{suffix}.fa", sample=SAMPLES_CONTROL,
            OUTDIR={OUTDIR}, suffix={ext}),
        st=expand("{OUTDIR}/sga/{sample}{suffix}.fa", sample=SAMPLES_TREATED,
            OUTDIR={OUTDIR}, suffix={ext})
    output:
        oc="{OUTDIR}/sga/control.fa",
        ot="{OUTDIR}/sga/treated.fa"
    shell:
        "cat {input.sc} >> {output.oc}; cat {input.st} >> {output.ot}; "

#remove duplicates
rule rmdup:
    input:
        f="{OUTDIR}/sga/{name}.fa",
        bwt="{OUTDIR}/sga/{name}.bwt",
        rbwt="{OUTDIR}/sga/{name}.rbwt",
        sai="{OUTDIR}/sga/{name}.sai",
        rsai="{OUTDIR}/sga/{name}.rsai"
    output:
        "{OUTDIR}/sga/{name}.rmdup.fa",
        "{OUTDIR}/sga/{name}.rmdup.dups.fa",
    params:
        pref="{OUTDIR}/sga/{name}"
    log:
        "{OUTDIR}/sga/{name}_logging.txt"
    threads:
        4
    shell:
        "{SGADIR}sga rmdup -t {threads} --prefix={params.pref} {input.f} >> {log} 2>> {log} && " +
         " mv {wildcards.name}.rmdup* {OUTDIR}/sga/"


########### Merging treated and control, remove duplicates ##########
rule merge_all:
    input:
        c="{OUTDIR}/sga/control.rmdup.fa",
        t="{OUTDIR}/sga/treated.rmdup.fa",
    output:
        "{OUTDIR}/sga/merged.fa",
    params:
        pref="{OUTDIR}/sga/merged"
    log:
        "{OUTDIR}/sga/merged_logging.txt"
    threads:
        4
    shell:
        "{SGADIR}sga merge -p {params.pref} -t {threads} {input.c} {input.t}  >> {log} 2>> {log} "


#### finding which duplicate duplicates which sequence using overlap graph build
rule condition_duplicated:
    input:
        f="{OUTDIR}/sga/merged.rmdup.fa",
        bwt="{OUTDIR}/sga/merged.rmdup.bwt",
        rbwt="{OUTDIR}/sga/merged.rmdup.rbwt",
        sai="{OUTDIR}/sga/merged.rmdup.sai",
        rsai="{OUTDIR}/sga/merged.rmdup.rsai",
        dups="{OUTDIR}/sga/merged.rmdup.dups.fa",
    output:
        "{OUTDIR}/sga/merged.rmdup.dups.merged.rmdup.asqg.gz"
    threads:
        4
    log:
        "{OUTDIR}/sga/merged_logging.txt"
    shell:
        "{SGADIR}sga overlap -m {READLEN} -t {threads} --target-file={input.f} {input.dups} >> {log} 2>> {log} && " +
        "mv merged.rmdup.dups.merged.rmdup.asqg* {OUTDIR}/sga/" #### bo opcja --prefix nie działa

########## Overlaps ###########
rule overlap:
    input:
        fa="{OUTDIR}/sga/merged.rmdup.fa",
        bwt="{OUTDIR}/sga/merged.rmdup.bwt",
        rbwt="{OUTDIR}/sga/merged.rmdup.rbwt",
        sai="{OUTDIR}/sga/merged.rmdup.sai",
        rsai="{OUTDIR}/sga/merged.rmdup.rsai"
    output:
        "{OUTDIR}/sga/merged.rmdup_{OVERLAP, [0-9]+}.asqg.gz"
    params:
        pref="merged.rmdup"
    log:
        "{OUTDIR}/sga/merged.rmdup_{OVERLAP, [0-9]+}_logging.txt"
    threads:
        4
    shell:
        "{SGADIR}sga overlap -m {wildcards.OVERLAP} -t {threads} {input.fa} >> {log} 2>> {log} && " +
        "mv {params.pref}.asqg.gz  {output} "   		#### bo opcja --prefix nie działa

rule unzip:
    input:
        "{file}.asqg.gz"
    output:
        "{file}.asqg"
    shell:
        "gunzip -c {input} > {output}"


# rule assemble:
#     input:
#         "{OUTDIR}/sga/merged{suf}_{OVERLAP}.asqg
#     shell:
#         "sga assemble -o $OUTDIR/${PREFIX}$SUF $OUTDIR/${PREFIX}$SUF.asqg.gz"



rule counts:
    input:
        graph = OUTDIR+"/sga/merged.rmdup_{OVERLAP}.asqg",
        c = OUTDIR+"/sga/control.rmdup.dups.fa",
        t = OUTDIR+"/sga/treated.rmdup.dups.fa",
        m = OUTDIR+"/sga/merged.rmdup.dups.fa",
        mg = OUTDIR+"/sga/merged.rmdup.dups.merged.rmdup.asqg"
    output:
        OUTDIR+"/sga/merged.rmdup_{OVERLAP}_counts.tsv"
    log:
        OUTDIR+"/sga/merged.rmdup_{OVERLAP}_counts_logging.txt"
    shell:
        "python ../counts_from_sga.py {input.graph} {input.c} {input.t} {input.m} {input.mg} {output} >> {log} 2> {log}"
